{"version":3,"sources":["layout/Nav.module.scss","layout/HeaderUserAction.tsx","context/DocTree.tsx","layout/Nav.tsx","pages/DocPage.tsx","App.tsx","utils/useGapi.tsx","index.tsx"],"names":["module","exports","HeaderUserAction","useState","gapi","auth2","getAuthInstance","isSignedIn","get","setIsSignedIn","useBus","data","payload","signedIn","profile","useMemo","currentUser","getBasicProfile","handleSignIn","useCallback","signIn","handleSignOut","signOut","HeaderGlobalAction","aria-label","onClick","src","getImageUrl","width","RootDriveId","Ctx","React","createContext","loading","DocTreeProvider","children","docTreeIsLoading","setDocTreeIsLoading","undefined","docTreeData","setDocTreeData","loadTreeData","a","client","drive","files","list","corpora","driveId","includeItemsFromAllDrives","supportsAllDrives","pageSize","q","fields","resp","console","log","itemsWithChildren","result","map","file","itemsByParent","forEach","parents","length","push","id","docTree","useMount","Provider","value","dummy","renderTree","nodes","expanded","isExpanded","nodeProps","onToggle","mapDocTreeItem","node","optionalChildren","label","name","Nav","useContext","treeData","history","useHistory","handleSelect","_ev","mimeType","SkeletonText","paragraph","className","styles","nav","selected","onSelect","DocPage","useParams","docContent","setDocContent","isLoading","setIsLoading","useEffect","export","fileId","parser","DOMParser","htmlDoc","parseFromString","body","bodyEl","querySelector","innerHTML","x","InlineLoading","description","dangerouslySetInnerHTML","__html","App","isLoaded","setIsLoaded","initClient","dispatchSignedIn","dispatch","type","init","apiKey","clientId","discoveryDocs","scope","error","listen","load","gapiLoaded","useGapi","HeaderContainer","render","Header","HeaderName","href","prefix","HeaderGlobalBar","SideNav","Content","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,SAAW,wB,yQCIrC,SAASC,IAAoB,IAAD,EACLC,mBAASC,KAAKC,MAAMC,kBAAkBC,WAAWC,OAD5C,mBAClCD,EADkC,KACtBE,EADsB,KAGzCC,YACE,mBACA,SAACC,GACCF,EAAcE,EAAKC,QAAQC,YAE7B,IAGF,IAAMC,EAAUC,mBAAQ,WACtB,OAAIR,EACKH,KAAKC,MAAMC,kBAAkBU,YAAYR,MAAMS,kBAE/C,OAER,CAACV,IAEEW,EAAeC,uBAAY,WAC/Bf,KAAKC,MAAMC,kBAAkBc,WAC5B,IAEGC,EAAgBF,uBAAY,WAChCf,KAAKC,MAAMC,kBAAkBgB,YAC5B,IAEH,OAAKf,EAQD,cAACgB,EAAA,EAAD,CAAoBC,aAAW,WAAWC,QAASJ,EAAnD,SACE,qBAAKK,IAAKZ,EAASa,cAAeC,MAAM,SAP1C,cAACL,EAAA,EAAD,CAAoBC,aAAW,UAAUC,QAASP,EAAlD,SACE,cAAC,KAAD,M,6CChCFW,EAAc,sBAWdC,EAAMC,IAAMC,cAAwB,CAAEC,SAAS,IAE9C,SAASC,EAAT,GAAwC,IAAbC,EAAY,EAAZA,SAAY,EACIhC,oBAAS,GADb,mBACrCiC,EADqC,KACnBC,EADmB,OAENlC,wBAAqCmC,GAF/B,mBAErCC,EAFqC,KAExBC,EAFwB,KAItCC,EAAetB,sBAAW,sBAAC,sCAAAuB,EAAA,6DAC/BL,GAAoB,GADW,kBAKVjC,KAAKuC,OAAOC,MAAMC,MAAMC,KAAK,CAC9CC,QAAS,QACTC,QAASnB,EACToB,2BAA2B,EAC3BC,mBAAmB,EACnBC,SAAU,IACVC,EAAG,kBACHC,OAAQ,sDAZmB,OAKvBC,EALuB,OAe7BC,QAAQC,IAAIF,GAENG,EAjBuB,oBAkB3BH,EAAKI,OAAOb,aAlBe,aAkB3B,EAAmBc,KAAI,SAACC,GACtB,OAAO,2BACFA,GADL,IAEEzB,SAAU,eArBa,QAuBrB,GACF0B,EAAgD,GAEtDJ,EAAkBK,SAAQ,SAACF,GAAU,IAAD,IACE,KAAhC,oBAACA,EAAKG,eAAN,aAAC,EAAcC,cAAf,QAAyB,SAIW1B,IAApCuB,EAAcD,EAAKG,QAAS,MAC9BF,EAAcD,EAAKG,QAAS,IAAM,IAEpCF,EAAcD,EAAKG,QAAS,IAAIE,KAAKL,IANnCL,QAAQC,IAAI,6BAA8BI,MAS7B,OAAjBH,QAAiB,IAAjBA,KAAmBK,SAAQ,SAACF,GAAU,IAAD,IACnCA,EAAKzB,SAAL,UAAgB0B,EAAa,UAACD,EAAKM,UAAN,QAAY,WAAzC,QAAgD,MAGlD1B,EAAc,UAACqB,EAAchC,UAAf,QAA+B,IAzChB,yBA2C7BQ,GAAoB,GA3CS,2EA6C9B,IAEG8B,EAAUpD,mBAAQ,WACtB,MAAO,CAAEJ,KAAM4B,EAAaN,QAASG,KACpC,CAACA,EAAkBG,IAMtB,OAJA6B,aAAS,WACP3B,OAGK,cAACX,EAAIuC,SAAL,CAAcC,MAAOH,EAArB,SAA+BhC,I,qBC3DxC,SAASoC,KAET,SAASC,EAAWC,EAAyBC,GAC3C,GAAKD,EAGL,OAAOA,EAAMd,KAAI,gBAAGxB,EAAH,EAAGA,SAAUwC,EAAb,EAAaA,WAAeC,EAA5B,gDACf,cAAC,WAAD,yBAEED,WAAU,OAAED,QAAF,IAAEA,IAAYC,EACxBE,SAAUN,GACNK,GAJN,aAMGJ,EAAWrC,EAAUuC,KALjBE,EAAUV,OAUrB,SAASY,EAAeL,GAA0C,IAAD,EAC/D,wBAAQA,QAAR,IAAQA,IAAS,UAAjB,aAAO,EAAed,KAAI,SAACoB,GACzB,IAAMC,EAAwB,GAI9B,OAHID,EAAK5C,SAAS6B,OAAS,IACzBgB,EAAiB7C,SAAW2C,EAAeC,EAAK5C,WAE3C,aACL+B,GAAIa,EAAKb,GACTe,MAAOF,EAAKG,KACZZ,MAAOS,GACJC,MAKM,SAASG,IAAO,IAAD,ED8BrBC,qBAAWtD,GC7BVG,EADoB,EACpBA,QAAStB,EADW,EACXA,KACX0E,EAAWtE,mBAAQ,kBAAM+D,EAAenE,KAAO,CAACA,IAEhD2E,EAAUC,cAEVC,EAAerE,uBAAY,SAACsE,EAAKV,GACrC,IAAMnB,EAAOmB,EAAKT,MAElB,OADAf,QAAQC,IAAII,EAAK8B,UACT9B,EAAK8B,UACX,IAAK,uCACHJ,EAAQrB,KAAR,eAAqBL,EAAKM,KAC1B,MACF,IAAK,qCACHoB,EAAQrB,KAAR,kBAAwBL,EAAKM,QAGhC,IAEH,OAAIjC,EACK,cAAC0D,EAAA,EAAD,CAAcC,WAAS,IAI9B,qBAAKC,UAAWC,IAAOC,IAAvB,SACE,cAAC,IAAD,CAAUd,MAAM,mBAAmBe,SAAU,GAAIC,SAAUT,EAA3D,SACGhB,EAAWa,GAAU,OCvEf,SAASa,IAAW,IACzBhC,EAAOiC,cAAPjC,GADwB,EAEI/D,mBAAS,IAFb,mBAEzBiG,EAFyB,KAEbC,EAFa,OAGElG,oBAAS,GAHX,mBAGzBmG,EAHyB,KAGdC,EAHc,KA4BhC,OAvBAC,qBAAU,WAAM,4CACd,kCAAA9D,EAAA,6DACE6D,GAAa,GADf,kBAGuBnG,KAAKuC,OAAOC,MAAMC,MAAM4D,OAAO,CAChDC,OAAQxC,EACRwB,SAAU,cALhB,OAGUpC,EAHV,OAOUqD,EAAS,IAAIC,UACbC,EAAUF,EAAOG,gBAAgBxD,EAAKyD,KAAM,aAC5CC,EAASH,EAAQI,cAAc,QAEnCZ,EADEW,EACYA,EAAOE,UAEP,UAbpB,uBAgBIX,GAAa,GAhBjB,0EADc,uBAAC,WAAD,wBAoBdY,KACC,CAACjD,IAEAoC,EACK,cAACc,EAAA,EAAD,CAAeC,YAAY,gCAG7B,qBAAKC,wBAAyB,CAAEC,OAAQnB,KCyBlCoB,MA7Cf,WAGE,OCfa,WAAoB,IAAD,EACArH,oBAAS,GADT,mBACzBsH,EADyB,KACfC,EADe,KAG1BC,EAAaxG,sBAAW,sBAAC,iBAYpByG,EAZoB,SAAAlF,EAAA,6DAYpBkF,EAZoB,SAYH/G,GACxBgH,YAAS,CAAEC,KAAM,kBAAmBlH,QAAS,CAAEC,eAbpB,kBAErBT,KAAKuC,OAAOoF,KAAK,CACrBC,OAAQ,0CACRC,SAAU,2EACVC,cAAe,CAAC,8DAChBC,MAAO,oFANkB,sDAS3B5E,QAAQ6E,MAAR,MAT2B,OAgB7BhI,KAAKC,MAAMC,kBAAkBC,WAAW8H,OAAOT,GAE/CF,GAAY,GAlBiB,yDAmB5B,IAMH,OAJAtD,aAAS,WACPhE,KAAKkI,KAAK,eAAgBX,MAGrB,CACLY,WAAYd,GDhBSe,GAAfD,WAON,cAAC,IAAD,UACE,cAACrG,EAAD,UACE,cAACuG,EAAA,EAAD,CACEC,OAAQ,kBACN,qCACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,KAAK,IAAIC,OAAO,YAA5B,kBAGA,cAACC,EAAA,EAAD,UACE,cAAC7I,EAAD,MAEF,cAAC8I,EAAA,EAAD,CAAStE,UAAQ,EAAjB,SACE,cAACS,EAAD,SAGJ,cAAC8D,EAAA,EAAD,UACE,qBAAKpD,UAAU,WAAf,SACE,qBAAKA,UAAU,UAAf,SACE,yBAASA,UAAU,gCAAnB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOqD,KAAK,WAAZ,SACE,cAAChD,EAAD,0BA1Bf,cAACkB,EAAA,EAAD,CAAeC,YAAY,wB,YEdtC8B,IAAST,OACP,cAAC,IAAMU,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.670f488b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__3bvDp\",\"skeleton\":\"Nav_skeleton__1S4Qu\"};","import { UserAvatar20 } from '@carbon/icons-react';\nimport { HeaderGlobalAction } from 'carbon-components-react';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport useBus from 'use-bus';\n\nexport default function HeaderUserAction() {\n  const [isSignedIn, setIsSignedIn] = useState(gapi.auth2.getAuthInstance().isSignedIn.get());\n\n  useBus(\n    'gSignedInChange',\n    (data) => {\n      setIsSignedIn(data.payload.signedIn);\n    },\n    []\n  );\n\n  const profile = useMemo(() => {\n    if (isSignedIn) {\n      return gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile();\n    } else {\n      return null;\n    }\n  }, [isSignedIn]);\n\n  const handleSignIn = useCallback(() => {\n    gapi.auth2.getAuthInstance().signIn();\n  }, []);\n\n  const handleSignOut = useCallback(() => {\n    gapi.auth2.getAuthInstance().signOut();\n  }, []);\n\n  if (!isSignedIn) {\n    return (\n      <HeaderGlobalAction aria-label=\"Sign In\" onClick={handleSignIn}>\n        <UserAvatar20 />\n      </HeaderGlobalAction>\n    );\n  } else {\n    return (\n      <HeaderGlobalAction aria-label=\"Sign Out\" onClick={handleSignOut}>\n        <img src={profile!.getImageUrl()} width=\"30\" />\n      </HeaderGlobalAction>\n    );\n  }\n}\n","import { useMount } from 'ahooks';\nimport React, { useCallback, useContext, useMemo, useState } from 'react';\n\nconst RootDriveId = '0AIURj86T5hpoUk9PVA';\n\nexport interface IDocTree {\n  loading: boolean;\n  data?: IDocTreeItem[];\n}\n\nexport interface IDocTreeItem extends gapi.client.drive.File {\n  children: IDocTreeItem[];\n}\n\nconst Ctx = React.createContext<IDocTree>({ loading: true });\n\nexport function DocTreeProvider({ children }) {\n  const [docTreeIsLoading, setDocTreeIsLoading] = useState(true);\n  const [docTreeData, setDocTreeData] = useState<IDocTreeItem[] | undefined>(undefined);\n\n  const loadTreeData = useCallback(async () => {\n    setDocTreeIsLoading(true);\n\n    try {\n      // FIXME: Support pagination\n      const resp = await gapi.client.drive.files.list({\n        corpora: 'drive',\n        driveId: RootDriveId,\n        includeItemsFromAllDrives: true,\n        supportsAllDrives: true,\n        pageSize: 500,\n        q: 'trashed = false',\n        fields: 'nextPageToken, files(name, id, parents, mimeType)',\n      });\n\n      console.log(resp);\n\n      const itemsWithChildren: IDocTreeItem[] =\n        resp.result.files?.map((file) => {\n          return {\n            ...file,\n            children: [],\n          };\n        }) ?? [];\n      const itemsByParent: Record<string, IDocTreeItem[]> = {};\n\n      itemsWithChildren.forEach((file) => {\n        if ((file.parents?.length ?? 0) === 0) {\n          console.log('File does not have parents', file);\n          return;\n        }\n        if (itemsByParent[file.parents![0]] === undefined) {\n          itemsByParent[file.parents![0]] = [];\n        }\n        itemsByParent[file.parents![0]].push(file);\n      });\n\n      itemsWithChildren?.forEach((file) => {\n        file.children = itemsByParent[file.id ?? ''] ?? [];\n      });\n\n      setDocTreeData(itemsByParent[RootDriveId] ?? []);\n    } finally {\n      setDocTreeIsLoading(false);\n    }\n  }, []);\n\n  const docTree = useMemo(() => {\n    return { data: docTreeData, loading: docTreeIsLoading } as IDocTree;\n  }, [docTreeIsLoading, docTreeData]);\n\n  useMount(() => {\n    loadTreeData();\n  });\n\n  return <Ctx.Provider value={docTree}>{children}</Ctx.Provider>;\n}\n\nexport function useDocTree() {\n  return useContext(Ctx);\n}\n","import { SkeletonText } from 'carbon-components-react';\nimport TreeView, { TreeNode } from 'carbon-components-react/lib/components/TreeView';\nimport React, { useCallback, useMemo } from 'react';\nimport { IDocTreeItem, useDocTree } from '../context/DocTree';\nimport { useHistory } from 'react-router-dom';\n\nimport styles from './Nav.module.scss';\n\ninterface INavItemProps {\n  id: string;\n  value?: any;\n  label?: React.ReactNode;\n  children?: INavItemProps[];\n  isExpanded?: boolean;\n}\n\nfunction dummy() {}\n\nfunction renderTree(nodes?: INavItemProps[], expanded?: boolean) {\n  if (!nodes) {\n    return;\n  }\n  return nodes.map(({ children, isExpanded, ...nodeProps }) => (\n    <TreeNode\n      key={nodeProps.id}\n      isExpanded={expanded ?? isExpanded}\n      onToggle={dummy}\n      {...nodeProps}\n    >\n      {renderTree(children, expanded)}\n    </TreeNode>\n  ));\n}\n\nfunction mapDocTreeItem(nodes?: IDocTreeItem[]): INavItemProps[] {\n  return (nodes ?? [])?.map((node) => {\n    const optionalChildren: any = {};\n    if (node.children.length > 0) {\n      optionalChildren.children = mapDocTreeItem(node.children);\n    }\n    return {\n      id: node.id,\n      label: node.name,\n      value: node,\n      ...optionalChildren,\n    } as INavItemProps;\n  });\n}\n\nexport default function Nav() {\n  const { loading, data } = useDocTree();\n  const treeData = useMemo(() => mapDocTreeItem(data), [data]);\n\n  const history = useHistory();\n\n  const handleSelect = useCallback((_ev, node) => {\n    const file = node.value as IDocTreeItem;\n    console.log(file.mimeType);\n    switch (file.mimeType) {\n      case 'application/vnd.google-apps.document':\n        history.push(`/doc/${file.id}`);\n        break;\n      case 'application/vnd.google-apps.folder':\n        history.push(`/folder/${file.id}`);\n        break;\n    }\n  }, []);\n\n  if (loading) {\n    return <SkeletonText paragraph />;\n  }\n\n  return (\n    <div className={styles.nav}>\n      <TreeView label=\"Table of Content\" selected={[]} onSelect={handleSelect}>\n        {renderTree(treeData, false)}\n      </TreeView>\n    </div>\n  );\n}\n","import { InlineLoading } from 'carbon-components-react';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport default function DocPage() {\n  const { id } = useParams();\n  const [docContent, setDocContent] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    async function x() {\n      setIsLoading(true);\n      try {\n        const resp = await gapi.client.drive.files.export({\n          fileId: id,\n          mimeType: 'text/html',\n        });\n        const parser = new DOMParser();\n        const htmlDoc = parser.parseFromString(resp.body, 'text/html');\n        const bodyEl = htmlDoc.querySelector('body');\n        if (bodyEl) {\n          setDocContent(bodyEl.innerHTML);\n        } else {\n          setDocContent('Error?');\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    x();\n  }, [id]);\n\n  if (isLoading) {\n    return <InlineLoading description=\"Loading document content...\" />;\n  }\n\n  return <div dangerouslySetInnerHTML={{ __html: docContent }}></div>;\n}\n","import React from 'react';\nimport { useGapi } from './utils';\nimport {\n  Content,\n  Header,\n  HeaderContainer,\n  HeaderGlobalBar,\n  HeaderName,\n  InlineLoading,\n  SideNav,\n} from 'carbon-components-react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { HeaderUserAction, Nav } from './layout';\nimport { DocTreeProvider } from './context/DocTree';\nimport DocPage from './pages/DocPage';\n\nfunction App() {\n  const { gapiLoaded } = useGapi();\n\n  if (!gapiLoaded) {\n    return <InlineLoading description=\"Loading Google API\" />;\n  }\n\n  return (\n    <Router>\n      <DocTreeProvider>\n        <HeaderContainer\n          render={() => (\n            <>\n              <Header>\n                <HeaderName href=\"#\" prefix=\"Gdoc Wiki\">\n                  Home\n                </HeaderName>\n                <HeaderGlobalBar>\n                  <HeaderUserAction />\n                </HeaderGlobalBar>\n                <SideNav expanded>\n                  <Nav />\n                </SideNav>\n              </Header>\n              <Content>\n                <div className=\"bx--grid\">\n                  <div className=\"bx--row\">\n                    <section className=\"bx--offset-lg-3 bx--col-lg-13\">\n                      <Switch>\n                        <Route path=\"/doc/:id\">\n                          <DocPage />\n                        </Route>\n                      </Switch>\n                    </section>\n                  </div>\n                </div>\n              </Content>\n            </>\n          )}\n        />\n      </DocTreeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import { useMount } from 'ahooks';\nimport { useCallback, useState } from 'react';\nimport { dispatch } from 'use-bus';\n\nexport default function useGapi() {\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const initClient = useCallback(async () => {\n    try {\n      await gapi.client.init({\n        apiKey: 'AIzaSyCr53G4OrNdOpjjejsM4wStjW_Uagudq8E',\n        clientId: '814839399439-cm9t983r5374hk28v5lt5ne75i6eit6c.apps.googleusercontent.com',\n        discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'],\n        scope: 'https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/documents',\n      });\n    } catch (ex) {\n      console.error(ex);\n    }\n\n    function dispatchSignedIn(signedIn) {\n      dispatch({ type: 'gSignedInChange', payload: { signedIn } });\n    }\n\n    gapi.auth2.getAuthInstance().isSignedIn.listen(dispatchSignedIn);\n\n    setIsLoaded(true);\n  }, []);\n\n  useMount(() => {\n    gapi.load('client:auth2', initClient);\n  });\n\n  return {\n    gapiLoaded: isLoaded,\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './global.carbon.scss';\nimport './global.index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}